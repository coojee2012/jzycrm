#!/usr/bin/perl -w


sub extensions_dialplan{
my $conf=qq~
[default]
[from-trunk-other]
include = app-trunk
[from-trunk-sip]
include = app-trunk
[from-trunk-iax]
include = app-trunk
[from-trunk-dahdi]
include = app-trunk
[from-exten-sip]
include = app-hints
include = parkedcalls
include = app-exten
[from-exten-iax]
include = app-hints
include = parkedcalls
include = app-exten
[from-exten-dahdi]
include = app-hints
include = parkedcalls
include = app-exten
[from-exten-custom]
include = app-hints
include = parkedcalls
include = app-exten

; ---------------------------
; 具体应用
; ---------------------------
[app-trunk]
; fxo or sip registry as no called
exten => s,1,NoOp('Call from TRUNK with no DID')
exten => s,n,AGI(agi://127.0.0.1/nocalledid)
exten => s,n,hangup
exten => _X.,1,NoOp('Call from TRUNK with DID:'\${EXTEN})
exten => _X.,n,Wait(2)
exten => _X.,n,Set(ROUTERLINE=2)
exten => _X.,n,Set(ONETOUCHMONITOR=3)
exten => _X.,n,AGI(agi://127.0.0.1/router?routerline=2&callednum=\${EXTEN})
exten => _X.,n,ExecIf(\$["\${PBXAGISTATUS}"!="1"]?Macro(REASON,NOVALI))
exten => _X.,n,ExecIf(\$["\${PBXAGISTATUS}"!="1"]?Hangup())
exten => _X.,n,Set(CALLERID(all)='\${ROUTER_PROCESS_CALLERIDNUM}' <\${ROUTER_PROCESS_CALLERIDNUM}>)
exten => _X.,n,ExecIf($["\${ROUTER_PROCESS_MODE}"=="1"]?AGI(agi://127.0.0.1/dial_local?callednum=\${ROUTER_PROCESS_EXTENSION}&typeof=\${ROUTER_PROCESS_DEFINED}))
exten => _X.,n,ExecIf($["\${ROUTER_PROCESS_MODE}"=="2"]?AGI(agi://127.0.0.1/dial_outbound?callednum=\${ROUTER_PROCESS_EXTENSION}&trunkid=\${ROUTER_PROCESS_DEFINED}))


exten => _X.,n,hangup



exten => h,1,NoOp(----CALL HANGUP----)
exten => h,n,AGI(agi://127.0.0.1/after_hangup?hangupreson=\${HANGUPCAUSE})
[app-exten]
exten => _X.,1,NoOp('Exten call from '\${CALLERID(num)}' to '\${EXTEN})
exten => _X.,n,Set(CHANNEL(language)=\${CURLANG})
exten => _X.,n,Set(ROUTERLINE=1)
exten => _X.,n,Set(ONETOUCHMONITOR=1)
exten => _X.,n,AGI(agi://127.0.0.1/router?routerline=1&callednum=\${EXTEN})
exten => _X.,n,ExecIf(\$["\${PBXAGISTATUS}"!= "1"]?Macro(REASON,NOVALI))
exten => _X.,n,ExecIf(\$["\${PBXAGISTATUS}"!= "1"]?Hangup())
exten => _X.,n,Set(CALLERID(all)='\${ROUTER_PROCESS_CALLERIDNUM}' <\${ROUTER_PROCESS_CALLERIDNUM}>)
exten => _X.,n,ExecIf(\$["\${ROUTER_PROCESS_MODE}"=="1"]?AGI(agi://127.0.0.1/dial_local?callednum=\${ROUTER_PROCESS_EXTENSION}&typeof=\${ROUTER_PROCESS_DEFINED}))
exten => _X.,n,ExecIf(\$["\${ROUTER_PROCESS_MODE}"=="2"]?AGI(agi://127.0.0.1/dial_outbound?callednum=\${ROUTER_PROCESS_EXTENSION}&trunkid=\${ROUTER_PROCESS_DEFINED}))
exten => _X.,n,hangup


exten  => _*8.,1,AGI(agi://127.0.0.1/mypickup?pickupnum=\${EXTEN:2})
exten  => _*8,n,Hangup()

exten => h,1,NoOp('--CALL OUT HANGUP--')
exten => h,n,AGI(agi://127.0.0.1/after_hangup?hangupreson=\${HANGUPCAUSE})

[sub-queuefindnumber]
exten => _X.,1,NoOp('Fined agent :'\${EXTEN})
exten => _X.,n,Set(CHANNEL(language)=\${CURLANG})
exten => _X.,n,Set(ONETOUCHMONITOR=1)
exten => _X.,n,Set(CALLFROMQUEUE=1)
;exten => _X.,n,Dial(SIP/\${EXTEN},15,trqM(testtwo))
exten => _X.,n,AGI(agi://127.0.0.1/dial_local?callednum=\${EXTEN}&typeof=extension&voicemail=no&dialargs=t)

[app-checkservice]
exten => _X.,1,NoOp('Agent check shelf service')
exten => _X.,n,Set(CHANNEL(language)=\${CURLANG})
exten => _X.,n,AGI(agi://127.0.0.1/custom_serviceCheck?extennum=\${EXTEN})

[macro-testtwo]
exten => _X.,1,NoOp('outgoing to '\${EXTEN})
exten => _X.,n,Set(CHANNEL(language)=\${CURLANG})
exten => _X.,n,Set(ROUTERLINE=1)
exten => _X.,n,Set(ONETOUCHMONITOR=1)
exten => _X.,n,AGI(agi://127.0.0.1/router?routerline=1&callednum=\${EXTEN})
exten => _X.,n,ExecIf(\$["\${PBXAGISTATUS}"!= "1"]?Hangup())
exten => _X.,n,hangup

exten => h,1,NoOp(----HANGUP CALL----)
exten => h,n,AGI(agi://127.0.0.1/after_hangup?hangupreson=\${HANGUPCAUSE})

[sub-outgoing]
exten => _X.,1,NoOp('outgoing to '\${EXTEN})
exten => _X.,n,Set(CHANNEL(language)=\${CURLANG})
exten => _X.,n,Set(ROUTERLINE=1)
exten => _X.,n,Set(ONETOUCHMONITOR=1)
exten => _X.,n,AGI(agi://127.0.0.1/router?routerline=1&callednum=\${EXTEN})
exten => _X.,n,ExecIf(\$["\${PBXAGISTATUS}"!="1"]?Hangup())
exten => _X.,n,Set(CALLERID(all)='\${ROUTER_PROCESS_CALLERIDNUM}' <\${ROUTER_PROCESS_CALLERIDNUM}>)
exten => _X.,n,ExecIf(\$["\${ROUTER_PROCESS_MODE}"=="1"]?AGI(agi://127.0.0.1/dial_local?callednum=\${ROUTER_PROCESS_EXTENSION}&typeof=\${ROUTER_PROCESS_DEFINED}&voicemail=no))
exten => _X.,n,ExecIf(\$["\${ROUTER_PROCESS_MODE}"=="2"]?AGI(agi://127.0.0.1/dial_outbound?callednum=\${ROUTER_PROCESS_EXTENSION}&trunkid=\${ROUTER_PROCESS_DEFINED}&voicemail=no))
exten => _X.,n,hangup

exten => h,1,NoOp('--CALL OUT HANGUP--')
exten => h,n,AGI(agi://127.0.0.1/after_hangup?hangupreson=\${HANGUPCAUSE})


[sub-outgoing-callback]
exten => _X.,1,NoOp('Outgoing callback ')
exten => _X.,n,AGI(agi://127.0.0.1/outgoing_linked)
exten => _X.,n,goto(app-trunk|\${EXTEN}|1)

[app-sendfax]
exten => inprocess,1,NoOp('*** Send Fax with ID '\${FAXQUEUEID}' ***')
exten => inprocess,n,GotoIf(\$["\${FAXSENDANNOUNCE}"=="0"]?sendfax,1)
exten => inprocess,n,set(PLAYSENDFAXCOUNT=0)
exten => inprocess,n(playsendfax),Background(mypbx/sendfax);
exten => inprocess,n,set(PLAYSENDFAXCOUNT=\$[\${PLAYSENDFAXCOUNT}+1])
exten => inprocess,n,goto(app-sendfax,inprocess,playsendfax)
exten => inprocess,n,hangup();
; detected go to fax
exten => _X,1,goto(app-sendfax,sendfax,1)
exten => fax,1,NoOp('*** REMOTE AUTO-ANSWER FAX DETECTED ***')
exten => fax,n,goto(app-sendfax,sendfax,1)
; do sending fax
exten => sendfax,1,NoOp('*** SENDING FAX NOW ***')
exten => sendfax,n,AGI(agi://127.0.0.1/fax?mode=sendfax&faxid=\${FAXQUEUEID})
exten => sendfax,n,hangup()
; when hangup get all data
exten => h,1,deadAGI(agi://127.0.0.1/fax?mode=sendover&faxid=\${FAXQUEUEID})

[app-receivefax]
exten => _X.,1,NoOp(**** RECEIVE FAX ACCOUNT '\${ACCOUNTCODE}' ****)
exten => _X.,n,AGI(agi://127.0.0.1/fax?mode=receivefax&receiver=\${EXTEN})
exten => _X.,n,hangup()
; when hangup get all data
exten => h,1,deadAGI(agi://127.0.0.1/fax?mode=receiveover&faxid=\${FAXQUEUEID})

; ---------------------------
; macro
; ---------------------------
[macro-REASON]
exten => s,1,noop('normal reason')
exten => s,n,Goto(reason-\${ARG1},1)
exten => reason-NOVALID,1,Playback(mypbx/invalid|NOANSWER)
exten => reason-CHANUNAVAIL,1,Playback(mypbx/chanunavail|NOANSWER)
exten => reason-BUSY,1,Playback(mypbx/busy|NOANSWER)
~;
return $conf;
}

sub extensionsconf{
my $conf=qq~
[general]
static=yes
writeprotect=no
autofallthrough=yes
clearglobalvars=no
priorityjumping=no
[globals]
DEFAULT_SREPLACE=200
DYNAMIC_FEATURES=automon
CURLANG=cn
#include extensions_dialplan.conf
#include extensions_hints.conf
#include extensions_custom.conf
~;    
return $conf;   
}


sub asterisk{
my $isallowed=shift;
my $num=4;
if(defined$isallowed and $isallowed eq 'true'){
$num=480;    
}
my $conf=qq~[directories]
astetcdir => /etc/asterisk 
astmoddir => /usr/lib/asterisk/modules
astvarlibdir => /var/lib/asterisk
astdatadir => /var/lib/asterisk
astagidir => /var/lib/asterisk/agi-bin
astspooldir => /var/spool/asterisk
astrundir => /var/run
astlogdir => /var/log/asterisk
[options]
languageprefix = yes
verbose = 9
internal_timing = no
systemname = CYPBX
maxcalls = $num~;

return $conf;
}

1;