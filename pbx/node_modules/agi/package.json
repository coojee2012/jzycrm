{
  "author": {
    "name": "Brian M. Carlson",
    "email": "brian@enginode.com",
    "url": "http://enginode.com"
  },
  "name": "agi",
  "description": "AGI (Asterisk Gateway Interface) for writing dialplan scripts",
  "version": "0.0.4",
  "repository": {
    "type": "git",
    "url": "git://github.com/brianc/node-agi.git"
  },
  "main": "lib/",
  "scripts": {
    "test": "mocha -R tap"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "readable-stream": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "memstream": "*"
  },
  "readme": "# node-agi\n\nClient for asterisk AGI protocol.  Parses incomming messages into events.  Dispatches AGI commands and their responses from asterisk.  Most commonly used as a low level client for a fAGI server.\n\n## note: still a work in progress\n\n## install\n```\nnpm install agi\n```\n\n## API\n\n### agi.createServer([listener])\n\nReturns a new net.Server instance.  The _listener_ will be called on a new agi connection with a single __Context__ object as described below.\n\n```js\nrequire('agi').createServer(function(context) {\n  //context is a new instance of agi.Context for each new agi session\n  //immedately after asterisk connects to the node process\n  context.on('variables', function(vars) {\n    console.log('received new call from: ' + vars.agi_callerid + ' with uniqueid: ' + vars.agi_uniqueid);\n  });\n}).listen(3000);\n```\n\n### new agi.Context(stream)\n\nConstructor to create a new instance of a context.  Supply a readable and writable stream to the constructor.  Commonly _stream_ will be a `net.Socket` instance.\n\n### context.exec(command, [args], [callback])\n\nDispatches the `EXEC` AGI command to asterisk with supplied command name and arguments.  _callback_ is called with the result of the dispatch.\n\n```js\ncontext.exec('ANSWER', function(err, res) {\n  //the channel is now answered\n});\n\ncontext.exec('RecieveFax', '/tmp/myfax.tif', function(err, res) {\n  //fax has been recieved by asterisk and written to /tmp/myfax.tif\n});\n```\n\n### context.hangup([callbac])\n\nDispatches the 'HANGUP' AGI command to asterisk.  Does __not__ close the sockets automatically.  _callback_ is called with the result of the dispatch.\n\n```js\ncontext.hangup(function(err, res) {\n  //the channel has now been hungup.\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "agi@0.0.4",
  "dist": {
    "shasum": "e3dd2b90cbaddd8583635570aea803a9625e3386"
  },
  "_from": "agi@*",
  "_resolved": "https://registry.npmjs.org/agi/-/agi-0.0.4.tgz"
}
