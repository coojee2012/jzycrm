{
    name: 'mysql',
    settings: {
        host: '192.168.100.254',
        port: 3306,
        database: 'callcenter',
        username: 'root',
        password: 'qysw2013db',
        debug: false
    },
    connected: true,
    connecting: false,
    models: {
        callsession: {
            [Function: ModelConstructor]
            validatesPresenceOf: [Function],
            validatesLengthOf: [Function],
            validatesNumericalityOf: [Function],
            validatesInclusionOf: [Function],
            validatesExclusionOf: [Function],
            validatesFormatOf: [Function],
            validate: [Function],
            validateAsync: [Function],
            validatesUniquenessOf: [Function],
            afterInitialize: null,
            beforeValidate: null,
            afterValidate: null,
            beforeSave: null,
            afterSave: null,
            beforeCreate: null,
            afterCreate: null,
            beforeUpdate: null,
            afterUpdate: null,
            beforeDestroy: null,
            afterDestroy: null,
            scope: [Function],
            relationNameFor: [Function: relationNameFor],
            hasMany: [Function: hasMany],
            belongsTo: [Function],
            hasAndBelongsToMany: [Function: hasAndBelongsToMany],
            include: [Function],
            defineProperty: [Function],
            whatTypeName: [Function],
            _forDB: [Function],
            create: [Function],
            updateOrCreate: [Function: upsert],
            upsert: [Function: upsert],
            findOrCreate: [Function: findOrCreate],
            exists: [Function: exists],
            find: [Function: find],
            query: [Function: query],
            all: [Function: all],
            findOne: [Function: findOne],
            destroyAll: [Function: destroyAll],
            count: [Function],
            toString: [Function],
            getter: {},
            setter: {},
            forEachProperty: [Function],
            registerProperty: [Function],
            autotpl: true,
            cloums: [Object],
            views: [Object],
            Name: 'callsession'
        },
        recordfiles: {
            [Function: ModelConstructor]
            validatesPresenceOf: [Function],
            validatesLengthOf: [Function],
            validatesNumericalityOf: [Function],
            validatesInclusionOf: [Function],
            validatesExclusionOf: [Function],
            validatesFormatOf: [Function],
            validate: [Function],
            validateAsync: [Function],
            validatesUniquenessOf: [Function],
            afterInitialize: null,
            beforeValidate: null,
            afterValidate: null,
            beforeSave: null,
            afterSave: null,
            beforeCreate: null,
            afterCreate: null,
            beforeUpdate: null,
            afterUpdate: null,
            beforeDestroy: null,
            afterDestroy: null,
            scope: [Function],
            relationNameFor: [Function: relationNameFor],
            hasMany: [Function: hasMany],
            belongsTo: [Function],
            hasAndBelongsToMany: [Function: hasAndBelongsToMany],
            include: [Function],
            defineProperty: [Function],
            whatTypeName: [Function],
            _forDB: [Function],
            create: [Function],
            updateOrCreate: [Function: upsert],
            upsert: [Function: upsert],
            findOrCreate: [Function: findOrCreate],
            exists: [Function: exists],
            find: [Function: find],
            query: [Function: query],
            all: [Function: all],
            findOne: [Function: findOne],
            destroyAll: [Function: destroyAll],
            count: [Function],
            toString: [Function],
            getter: {},
            setter: {},
            forEachProperty: [Function],
            registerProperty: [Function],
            autotpl: false,
            cloums: [Object],
            views: [Object],
            Name: 'recordfiles'
        },
        localnumber: {
            [Function: ModelConstructor]
            validatesPresenceOf: [Function],
            validatesLengthOf: [Function],
            validatesNumericalityOf: [Function],
            validatesInclusionOf: [Function],
            validatesExclusionOf: [Function],
            validatesFormatOf: [Function],
            validate: [Function],
            validateAsync: [Function],
            validatesUniquenessOf: [Function],
            afterInitialize: null,
            beforeValidate: null,
            afterValidate: null,
            beforeSave: null,
            afterSave: null,
            beforeCreate: null,
            afterCreate: null,
            beforeUpdate: null,
            afterUpdate: null,
            beforeDestroy: null,
            afterDestroy: null,
            scope: [Function],
            relationNameFor: [Function: relationNameFor],
            hasMany: [Function: hasMany],
            belongsTo: [Function],
            hasAndBelongsToMany: [Function: hasAndBelongsToMany],
            include: [Function],
            defineProperty: [Function],
            whatTypeName: [Function],
            _forDB: [Function],
            create: [Function],
            updateOrCreate: [Function: upsert],
            upsert: [Function: upsert],
            findOrCreate: [Function: findOrCreate],
            exists: [Function: exists],
            find: [Function: find],
            query: [Function: query],
            all: [Function: all],
            findOne: [Function: findOne],
            destroyAll: [Function: destroyAll],
            count: [Function],
            toString: [Function],
            getter: {},
            setter: {},
            forEachProperty: [Function],
            registerProperty: [Function],
            autotpl: true,
            cloums: [Object],
            views: [Object],
            Name: 'localnumber'
        },
        extension: {
            [Function: ModelConstructor]
            validatesPresenceOf: [Function],
            validatesLengthOf: [Function],
            validatesNumericalityOf: [Function],
            validatesInclusionOf: [Function],
            validatesExclusionOf: [Function],
            validatesFormatOf: [Function],
            validate: [Function],
            validateAsync: [Function],
            validatesUniquenessOf: [Function],
            afterInitialize: null,
            beforeValidate: null,
            afterValidate: null,
            beforeSave: null,
            afterSave: null,
            beforeCreate: null,
            afterCreate: null,
            beforeUpdate: null,
            afterUpdate: null,
            beforeDestroy: null,
            afterDestroy: null,
            scope: [Function],
            relationNameFor: [Function: relationNameFor],
            hasMany: [Function: hasMany],
            belongsTo: [Function],
            hasAndBelongsToMany: [Function: hasAndBelongsToMany],
            include: [Function],
            defineProperty: [Function],
            whatTypeName: [Function],
            _forDB: [Function],
            create: [Function],
            updateOrCreate: [Function: upsert],
            upsert: [Function: upsert],
            findOrCreate: [Function: findOrCreate],
            exists: [Function: exists],
            find: [Function: find],
            query: [Function: query],
            all: [Function: all],
            findOne: [Function: findOne],
            destroyAll: [Function: destroyAll],
            count: [Function],
            toString: [Function],
            getter: {},
            setter: {},
            forEachProperty: [Function],
            registerProperty: [Function],
            autotpl: true,
            cloums: [Object],
            views: [Object],
            Name: 'extension'
        },
        callevent: {
            [Function: ModelConstructor]
            validatesPresenceOf: [Function],
            validatesLengthOf: [Function],
            validatesNumericalityOf: [Function],
            validatesInclusionOf: [Function],
            validatesExclusionOf: [Function],
            validatesFormatOf: [Function],
            validate: [Function],
            validateAsync: [Function],
            validatesUniquenessOf: [Function],
            afterInitialize: null,
            beforeValidate: null,
            afterValidate: null,
            beforeSave: null,
            afterSave: null,
            beforeCreate: null,
            afterCreate: null,
            beforeUpdate: null,
            afterUpdate: null,
            beforeDestroy: null,
            afterDestroy: null,
            scope: [Function],
            relationNameFor: [Function: relationNameFor],
            hasMany: [Function: hasMany],
            belongsTo: [Function],
            hasAndBelongsToMany: [Function: hasAndBelongsToMany],
            include: [Function],
            defineProperty: [Function],
            whatTypeName: [Function],
            _forDB: [Function],
            create: [Function],
            updateOrCreate: [Function: upsert],
            upsert: [Function: upsert],
            findOrCreate: [Function: findOrCreate],
            exists: [Function: exists],
            find: [Function: find],
            query: [Function: query],
            all: [Function: all],
            findOne: [Function: findOne],
            destroyAll: [Function: destroyAll],
            count: [Function],
            toString: [Function],
            getter: {},
            setter: {},
            forEachProperty: [Function],
            registerProperty: [Function],
            autotpl: true,
            cloums: [Object],
            views: [Object],
            Name: 'callevent'
        }
    },
    definitions: {
        callsession: {
            properties: [Object],
            settings: [Object]
        },
        recordfiles: {
            properties: [Object],
            settings: [Object]
        },
        localnumber: {
            properties: [Object],
            settings: [Object]
        },
        extension: {
            properties: [Object],
            settings: [Object]
        },
        callevent: {
            properties: [Object],
            settings: [Object]
        }
    },
    client: {
        config: {
            host: '192.168.100.254',
            port: 3306,
            socketPath: undefined,
            user: 'root',
            password: 'qysw2013db',
            database: undefined,
            insecureAuth: false,
            supportBigNumbers: false,
            bigNumberStrings: false,
            debug: false,
            stringifyObjects: false,
            timezone: 'local',
            flags: '',
            queryFormat: undefined,
            pool: undefined,
            multipleStatements: false,
            typeCast: true,
            maxPacketSize: 0,
            charsetNumber: 33,
            clientFlags: 193487,
            protocol41: true
        },
        _socket: {
            _handle: null,
            _pendingWriteReqs: 0,
            _flags: 5,
            _connectQueueSize: 0,
            destroyed: true,
            errorEmitted: false,
            bytesRead: 17656,
            _bytesDispatched: 675,
            allowHalfOpen: undefined,
            _connecting: false,
            writable: false,
            _events: [Object],
            readable: false,
            _paused: false,
            _connectQueue: null,
            _idleNext: null,
            _idlePrev: null,
            _idleTimeout: -1
        },
        _protocol: {
            readable: true,
            writable: true,
            _config: [Object],
            _connection: [Circular],
            _callback: null,
            _fatalError: [Object],
            _quitSequence: null,
            _handshakeSequence: [Object],
            _handshaked: true,
            _destroyed: false,
            _queue: [],
            _handshakeInitializationPacket: [Object],
            _parser: [Object],
            _events: [Object]
        },
        _connectCalled: true,
        state: 'protocol_error',
        _events: {
            error: [Function]
        }
    },
    _events: {
        error: [Function],
        connected: [
            [Function],
            [Function],
            [Function],
            [Function],
            [Function]
        ]
    },
    _maxListeners: 0,
    adapter: {
        name: 'mysql',
        _models: {
            callsession: [Object],
            recordfiles: [Object],
            localnumber: [Object],
            extension: [Object],
            callevent: [Object]
        },
        client: {
            config: [Object],
            _socket: [Object],
            _protocol: [Object],
            _connectCalled: true,
            state: 'protocol_error',
            _events: [Object]
        },
        schema: [Circular],
        log: [Function],
        logger: [Function]
    },
    connect: [Function]
}