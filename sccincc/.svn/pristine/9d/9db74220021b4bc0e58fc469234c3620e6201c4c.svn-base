{
  "author": {
    "name": "Daniel Dickison",
    "email": "ddickison@carnegielearning.com"
  },
  "name": "connect-mysql-session",
  "description": "A MySQL session store for node.js connect.",
  "version": "0.1.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/CarnegieLearning/connect-mysql-session.git"
  },
  "main": "./index.js",
  "engines": {
    "node": "~0.4"
  },
  "dependencies": {
    "sequelize": "~1.1"
  },
  "devDependencies": {
    "connect": "~1.6"
  },
  "readme": "connect-mysql-session\n=====================\n\nA MySQL session store for the [connectjs][] [session middleware][] for [node.js][].\n\nCurrently, this code appears to function correctly but it has not been optimized for performance.  The store is implemented using [sequelize][] ORM, simply dumping the JSON-serialized session into a MySQL TEXT column.\n\nInstallation\n------------\n\nUsing [npm][]:\n\n    npm install -g connect-mysql-session\n\nBy cloning the repo:\n\n    git clone git://github.com/CarnegieLearning/connect-mysql-session.git\n    cd connect-mysql-session\n    npm link\n\n(Note: in both cases you may need to use `sudo` when performing the `npm` step.)\n\nUsage\n-----\n\nThe following example uses [expressjs][], but this should work fine using [connectjs][] without the [expressjs][] web app layer.\n\n    var express = require('express'),\n        MySQLSessionStore = require('connect-mysql-session')(express);\n\n    var app = express.createServer();\n    app.use(express.cookieParser());\n    app.use(express.session({\n        store: new MySQLSessionStore(\"dbname\", \"user\", \"password\", {\n            // options...\n        }),\n        secret: \"keyboard cat\"\n    }));\n    ...\n\nOptions\n-------\n\n### forceSync ###\n\nDefault: `false`. If set to true, the Sessions table will be dropped before being reinitialized, effectively clearing all session data.\n\n### checkExpirationInterval ###\n\nDefault: `1000*60*10` (10 minutes). How frequently the session store checks for and clears expired sessions.\n\n### defaultExpiration ###\n\nDefault: `1000*60*60*24` (1 day). How long session data is stored for \"user session\" cookies -- i.e. sessions that only last as long as the user keeps their browser open, which are created by doing `req.session.maxAge = null`.\n\nChanges\n-------\n\n### 0.1.1 and 0.1.2 (2011-08-03) ###\n\n* Lazy initialization to ensure model is ready before accessing.\n* Index the sid column.\n\n### 0.1.0 (2011-07-19) ###\n\n* Initial version.\n\n\n[connectjs]: http://senchalabs.github.com/connect/\n[session middleware]: http://senchalabs.github.com/connect/middleware-session.html\n[node.js]: http://nodejs.org/\n[sequelize]: http://www.sequelizejs.com/\n[expressjs]: http://expressjs.com/\n[npm]: http://npmjs.org/\n",
  "readmeFilename": "README.markdown",
  "_id": "connect-mysql-session@0.1.3",
  "dist": {
    "shasum": "142d101e6309c7000be4dc6b5c69f7857a5f7229"
  },
  "_from": "connect-mysql-session@*",
  "_resolved": "https://registry.npmjs.org/connect-mysql-session/-/connect-mysql-session-0.1.3.tgz"
}
